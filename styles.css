/* Large */
.navigation {
    display: flex;
    flex-flow: row wrap;
    /* This aligns items to the end line on main-axis */
    justify-content: flex-end;
  }
  
  /* Medium screens */
  @media all and (max-width: 800px) {
    .navigation {
      /* When on medium sized screens, we center it by evenly distributing empty space around items */
      justify-content: space-around;
    }
  }
  
  /* Small screens */
  @media all and (max-width: 500px) {
    .navigation {
      /* On small screens, we are no longer using row direction but column */
      flex-direction: column;
    }
  }
  
  .navigation {
    display: flex;
    flex-flow: row wrap;
    justify-content: flex-end;
    
    list-style: none;
    margin: 0; 
    background: rgb(190, 0, 102);
  }
  
  .navigation a {
    text-decoration: none;
    display: block;
    padding: 1em;
    color: rgb(255, 224, 244);
  }
  
  .navigation a:hover {
    background: #1565C0;
  }
  
  @media all and (max-width: 800px) {
    .navigation {
      justify-content: space-around;
    }
  }
  
  @media all and (max-width: 600px) {
    .navigation {
      flex-flow: column wrap;
      padding: 0;
    }
    .navigation a { 
      text-align: center; 
      padding: 10px;
      border-top: 1px solid rgb(255, 180, 210); 
      border-bottom: 1px solid rgba(0, 0, 0, 0.1); 
    }
    .navigation li:last-of-type a {
      border-bottom: none;
    }
  }
  
  .parent {
    display: flex;
    height: 300px; /* Or whatever */
  }
  
  .child {
    width: 100px;  /* Or whatever */
    height: 100px; /* Or whatever */
    margin: auto;  /* Magic! */
  }

  .flex-container {
    /* We first create a flex layout context */
    display: flex;
  
    /* Then we define the flow direction 
       and if we allow the items to wrap 
     * Remember this is the same as:
     * flex-direction: row;
     * flex-wrap: wrap;
     */
    flex-flow: row wrap;
  
    /* Then we define how is distributed the remaining space */
    justify-content: space-around;
  }

  flex-container {
    /* We first create a flex layout context */
    display: flex;
    
    /* Then we define the flow direction 
       and if we allow the items to wrap 
     * Remember this is the same as:
     * flex-direction: row;
     * flex-wrap: wrap;
     */
    flex-flow: row wrap;
    
    /* Then we define how is distributed the remaining space */
    justify-content: space-around;
    
    padding: 0;
    margin: 0;
    list-style: none;
  }
  
  .flex-item {
    background: rgb(255, 192, 215);
    padding: 5px;
    width: 200px;
    height: 150px;
    margin-top: 10px;
    line-height: 150px;
    color: rgb(179, 4, 80);
    font-weight: bold;
    font-size: 3em;
    text-align: center;
  }

  .wrapper {
    display: flex;
    flex-flow: row wrap;
  }
  
  /* We tell all items to be 100% width, via flex-basis */
  .wrapper > * {
    flex: 1 100%;
  }
  
  /* We rely on source order for mobile-first approach
   * in this case:
   * 1. header
   * 2. article
   * 3. aside 1
   * 4. aside 2
   * 5. footer
   */
  
  /* Medium screens */
  @media all and (min-width: 600px) {
    /* We tell both sidebars to share a row */
    .aside { flex: 1 auto; }
  }
  
  /* Large screens */
  @media all and (min-width: 800px) {
    /* We invert order of first sidebar and main
     * And tell the main element to take twice as much width as the other two sidebars 
     */
    .main { flex: 3 0px; }
    .aside-1 { order: 1; }
    .main    { order: 2; }
    .aside-2 { order: 3; }
    .footer  { order: 4; }
  }
  .wrapper {
    display: flex;  
    flex-flow: row wrap;
    font-weight: bold;
    text-align: center; 
  }
  
  .wrapper > * {
    padding: 10px;
    flex: 1 100%;
  }
  
  .header {
    background:rgb(255, 82, 186);
  }
  
  .footer {
    background: rgb(255, 82, 186);
  }
  
  .main {
    text-align: left;
    background: rgb(255, 192, 215);
  }
  
  .aside-1 {
    background: rgb(194, 137, 255);
  }
  
  .aside-2 {
    background: rgb(194, 137, 255);
  }
  
  @media all and (min-width: 600px) {
    .aside { flex: 1 0 0; }
  }
  
  @media all and (min-width: 800px) {
    .main    { flex: 3 0px; }
    .aside-1 { order: 1; } 
    .main    { order: 2; }
    .aside-2 { order: 3; }
    .footer  { order: 4; }
  }
  
  body {
    padding: 2em; 
  }